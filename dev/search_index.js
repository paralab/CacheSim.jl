var documenterSearchIndex = {"docs":
[{"location":"usage/#How-to-use-CacheSim","page":"How to use CacheSim","title":"How to use CacheSim","text":"","category":"section"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"These are the exported functions and structs. Most common usage will be limited to these.","category":"page"},{"location":"usage/#Creating-a-Cache","page":"How to use CacheSim","title":"Creating a Cache","text":"","category":"section"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"Begin by creating Cache objects. This can be done through a cache definition file using get_cacheSim_from_file or directly with the build_cache function. When using the file, the entire hierarchy is constructed and the first level Cache is returned. This first level is the one used for all cache operations and it is linked to the other levels automatically. When building cache directly, begin by building the last level and build in order till the first level. Previous levels will be linked by passing them as the load_from and store_to arguments in build_cache. See an example if this isn't clear.","category":"page"},{"location":"usage/#Simulate-Accesses","page":"How to use CacheSim","title":"Simulate Accesses","text":"","category":"section"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"After creating a cache, use the cache_load and cache_store functions to simulate memory accesses. Pass the first level cache as an argument along with the starting address and number of bytes.","category":"page"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"TODO: I want to have an option to return info about the access including hit/miss and set number for each level involved. This would allow external processing of the access stats.","category":"page"},{"location":"usage/#Output-Stats","page":"How to use CacheSim","title":"Output Stats","text":"","category":"section"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"At any point the functions print_stats or get_stats_string will produce a summary of the loads, stores, hits and misses for each cache level.","category":"page"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"Pages = [\"usage.md\"]","category":"page"},{"location":"usage/","page":"How to use CacheSim","title":"How to use CacheSim","text":"Cache\ncache_load(cache::Cache, addr::Int, bytes::Int)\ncache_store(cache::Cache, addr::Int, bytes::Int)\nget_cacheSim_from_file(cache_file::String)\nbuild_cache(name::String, cl_size::Int, sets::Int, ways::Int; [kwargs])\nprint_stats(cache::Cache)\nget_stats_string(cache::Cache)","category":"page"},{"location":"usage/#CacheSim.Cache","page":"How to use CacheSim","title":"CacheSim.Cache","text":"Cache\n\nThe cache heirarchy is held in Cache objects. Each Cache represents one  level and has info about the memory structure, policies, heirarchy, and stats.\n\n\n\n\n\n","category":"type"},{"location":"usage/#CacheSim.cache_load-Tuple{Cache, Int64, Int64}","page":"How to use CacheSim","title":"CacheSim.cache_load","text":"cache_load(cache::Cache, addr::Int, bytes::Int)\n\nLoad this many bytes from this address.\n\n\n\n\n\n","category":"method"},{"location":"usage/#CacheSim.cache_store-Tuple{Cache, Int64, Int64}","page":"How to use CacheSim","title":"CacheSim.cache_store","text":"cache_store(cache::Cache, addr::Int, bytes::Int)\n\nStore this many bytes to this address.\n\n\n\n\n\n","category":"method"},{"location":"usage/#CacheSim.get_cacheSim_from_file-Tuple{String}","page":"How to use CacheSim","title":"CacheSim.get_cacheSim_from_file","text":"get_cacheSim_from_file(cache_file::String)\n\nBuild a set of caches from a definition file.\n\n\n\n\n\n","category":"method"},{"location":"usage/#CacheSim.build_cache-Tuple{String, Int64, Int64, Int64}","page":"How to use CacheSim","title":"CacheSim.build_cache","text":"build_cache(name::String, cl_size::Int, sets::Int, ways::Int; [kwargs])\n\nBuild a cache with these parameters. kwargs(default):\n\nsubblock_size(cl_size)\nreplacement_policy_id(1=LRU)\nwrite_back(0=no)\nwrite_allocate(0=no)\nwrite_combining(0=no)\nload_from(nothing)\nstore_to(nothing)\nvictims_to(nothing)\nswap_on_load(0)\nverbosity(0)\n\n\n\n\n\n","category":"method"},{"location":"usage/#CacheSim.print_stats-Tuple{Cache}","page":"How to use CacheSim","title":"CacheSim.print_stats","text":"print_stats(cache::Cache)\n\nPrint all stats for each cache;\n\n\n\n\n\n","category":"method"},{"location":"usage/#CacheSim.get_stats_string-Tuple{Cache}","page":"How to use CacheSim","title":"CacheSim.get_stats_string","text":"get_stats_string(cache::Cache)\n\nSimilar to print_stats, but returns the output string rather than printing it.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basics","page":"Examples","title":"Basics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This is a simple example in which a 3-level cache is built directly and a few accesses are performed.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CacheSim\n\n# Build each level starting from the last\nL3 = build_cache(\"L3\", 64, 9216, 16, write_back=1, write_allocate=1);\nL2 = build_cache(\"L2\", 64, 512, 8, write_back=1, write_allocate=1, load_from=L3, store_to=L3);\nL1 = build_cache(\"L1\", 64, 64, 8, write_back=1, write_allocate=1, load_from=L2, store_to=L2);\n\n# Simulate a few accesses\ncache_load(L1, 4321, 8);  # miss in all levels\ncache_store(L1, 512, 128);# miss in all levels (using write_allocate)\ncache_load(L1, 512, 16);  # hit in L1\n\nprint_stats(L1);","category":"page"},{"location":"examples/#Using-a-cache-definition-file","page":"Examples","title":"Using a cache definition file","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Similar to above, but the cache info is read from a file. The file contains the following text:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"3 name=L1,sets=64,ways=8,clsize=64,replacementpolicyid=1,writeback=1,writeallocate=1,loadfrom=L2,storeto=L2 name=L2,sets=512,ways=8,clsize=64,replacementpolicyid=1,writeback=1,writeallocate=1,loadfrom=L3,storeto=L3 name=L3,sets=9216,ways=16,clsize=64,replacementpolicyid=1,writeback=1,write_allocate=1","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CacheSim\n\n#= Build cache using definition from the file cachedef which contains this:\n3\nname=L1,sets=64,ways=8,cl_size=64,replacement_policy_id=1,write_back=1,write_allocate=1,load_from=L2,store_to=L2\nname=L2,sets=512,ways=8,cl_size=64,replacement_policy_id=1,write_back=1,write_allocate=1,load_from=L3,store_to=L3\nname=L3,sets=9216,ways=16,cl_size=64,replacement_policy_id=1,write_back=1,write_allocate=1\n=#\nL1 = get_cacheSim_from_file(\"cachedef\");\n\n# Simulate a few accesses\ncache_load(L1, 4321, 8);  # miss in all levels\ncache_store(L1, 512, 128);# miss in all levels (using write_allocate)\ncache_load(L1, 512, 16);  # hit in L1\n\nprint_stats(L1);","category":"page"},{"location":"#Documentation-for-CacheSim.jl","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"","category":"section"},{"location":"","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"This is a Julia port of pycachsim from https://github.com/RRZE-HPC/pycachesim.","category":"page"},{"location":"","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"See their Github page for more information on the cache simulator. This page will focus on how to use CacheSim.jl and the added or modified features.","category":"page"},{"location":"#Get-Started","page":"Documentation for CacheSim.jl","title":"Get Started","text":"","category":"section"},{"location":"","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"From the Julia REPL, add the CacheSim package using ]add \"https://github.com/paralab/CacheSim.jl\"","category":"page"},{"location":"","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"Alternatively, you can use a local copy of the source by navigating to  the directory containing the CacheSim.jl file and typing  include(\"CacheSim.jl\"); using .CacheSim","category":"page"},{"location":"","page":"Documentation for CacheSim.jl","title":"Documentation for CacheSim.jl","text":"Pages = [\"usage.md\"]","category":"page"}]
}
